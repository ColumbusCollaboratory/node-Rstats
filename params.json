{"name":"node-rstats","tagline":"An interface for node.js to statistical programming language R based on the fabulous Rcpp package","body":"[![NPM version](https://badge.fury.io/js/rstats.svg)](http://badge.fury.io/js/rstats)\r\n\r\nnode-Rstats\r\n===========\r\n\r\nAn interface for node.js to statistical programming language R based on the fabulous Rcpp package\r\n\r\n## Installation\r\n\r\nCurrently, `rstats` is ONLY supported for Unix operating systems. \r\n\r\nAlso, it is required that the R packages `RInside`, `Rcpp` and `RJSONIO` are installed inside R. Additionally, building the package using `node-gyp` requires\r\n\r\n  * `python` (`v2.7`, `v3.x.x` is __*not*__ supported)\r\n  * `make`\r\n  * A C/C++ compiler toolchain, such as GCC\r\n\r\nWith these prerequisites satisfied, one can simply install `rstats` using npm \r\n\r\n```bash\r\nnpm install rstats\r\n```\r\n\r\n## Getting Started\r\n\r\nAfter installation, the package can be loaded as follows:\r\n\r\n```javascript\r\nvar rstats  = require('rstats');\r\n```\r\n\r\nOnce the package is loaded, we can create an R session by the command \r\n\r\n```javascript\r\nvar R  = new rstats.session(); \r\n```\r\n## Important Functions\r\n\r\n### parseEvalQ\r\n\r\nEvaluating R expressions is easy. We can use the *parseEvalQ* function as follows:\r\n\r\n```javascript\r\nR.parseEvalQ(\"cat('\\n Hello World \\n')\");\r\n```\r\n\r\n\r\n\r\n### assign\r\n\r\nNumeric values can be easily assigned to variables in the current R session:\r\n\r\n```javascript\r\nR.assign('x', 17);\r\nR.assign('y', 3);\r\n\r\n// calculate the sum of x+y and print the result\r\nR.parseEvalQ(\"res = x + y; print(res);\");\r\n```\r\n\r\n### get\r\n\r\nTo retrieve an object from the R session, we use the *get* command. For example, let us create a 2x2 matrix in R and retrieve it in JavaScript as a nested array:\r\n\r\n```javascript\r\nR.parseEvalQ(\"mat = matrix(1:4,ncol=2,nrow=2)\");\r\nvar mat = R.get('mat');\r\n```\r\n\r\nInternally, the *get* function uses JSON in order to convert the R data types to JavaScript data types.\r\n\r\nWe can also run much more complicated calculations and expose the R objects to JavaScript. Consider a linear regression example:\r\n\r\n```javascript\r\nR.parseEvalQ('x = rnorm(100); y = 4x + rnorm(100); lm_fit = lm(y~x);');\r\nvar lm_fit = R.get('lm_fit');\r\nvar coefs = lm_fit.coefficients;\r\nvar residuals = lm_fit.residuals;\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}